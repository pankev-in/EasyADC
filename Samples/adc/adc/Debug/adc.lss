
adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000008c  00000100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000100  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000015f  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000e2  00000000  00000000  000002af  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000144  00000000  00000000  00000391  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000175  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000024  00000000  00000000  00000671  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000695  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	29 c0       	rjmp	.+82     	; 0x88 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:

int main(void)
{
	unsigned int analog_value=0;
	
	DDRD =0xFF;
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x00;
  3c:	14 ba       	out	0x14, r1	; 20
	PORTD =0b00000000;
  3e:	12 ba       	out	0x12, r1	; 18
	
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS0);
  40:	85 e8       	ldi	r24, 0x85	; 133
  42:	86 b9       	out	0x06, r24	; 6
	// ADEN: Set to turn on ADC , by default it is turned off
	//ADPS2: ADPS2 and ADPS0 set to make division factor 32
	
	ADMUX=0x05; // ADC input channel set to PC5
  44:	85 e0       	ldi	r24, 0x05	; 5
  46:	87 b9       	out	0x07, r24	; 7
	
	
	PORTD |= (1<<6);	
  48:	96 9a       	sbi	0x12, 6	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4a:	2f e3       	ldi	r18, 0x3F	; 63
  4c:	8d e0       	ldi	r24, 0x0D	; 13
  4e:	93 e0       	ldi	r25, 0x03	; 3
  50:	21 50       	subi	r18, 0x01	; 1
  52:	80 40       	sbci	r24, 0x00	; 0
  54:	90 40       	sbci	r25, 0x00	; 0
  56:	e1 f7       	brne	.-8      	; 0x50 <__SREG__+0x11>
  58:	00 c0       	rjmp	.+0      	; 0x5a <__SREG__+0x1b>
  5a:	00 00       	nop
	_delay_ms(1000);
	PORTD &= ~(1<<6);
  5c:	96 98       	cbi	0x12, 6	; 18
  5e:	2f e3       	ldi	r18, 0x3F	; 63
  60:	8d e0       	ldi	r24, 0x0D	; 13
  62:	93 e0       	ldi	r25, 0x03	; 3
  64:	21 50       	subi	r18, 0x01	; 1
  66:	80 40       	sbci	r24, 0x00	; 0
  68:	90 40       	sbci	r25, 0x00	; 0
  6a:	e1 f7       	brne	.-8      	; 0x64 <__SREG__+0x25>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <__SREG__+0x2f>
  6e:	00 00       	nop
	_delay_ms(1000);
	
    while(1)
    {
		ADCSRA |= (1<<ADSC); // Start conversion
  70:	36 9a       	sbi	0x06, 6	; 6
		while (ADCSRA & (1<<ADSC)); // wait for conversion to complete
  72:	36 99       	sbic	0x06, 6	; 6
  74:	fe cf       	rjmp	.-4      	; 0x72 <__SREG__+0x33>
		analog_value = ADCW; //Store ADC value
  76:	84 b1       	in	r24, 0x04	; 4
  78:	95 b1       	in	r25, 0x05	; 5
		
		if(analog_value < 700){
  7a:	8c 3b       	cpi	r24, 0xBC	; 188
  7c:	92 40       	sbci	r25, 0x02	; 2
  7e:	10 f4       	brcc	.+4      	; 0x84 <__SREG__+0x45>
			PORTD &= ~(1<<6);
  80:	96 98       	cbi	0x12, 6	; 18
  82:	f6 cf       	rjmp	.-20     	; 0x70 <__SREG__+0x31>
		}
		else{
			PORTD |= (1<<6);	
  84:	96 9a       	sbi	0x12, 6	; 18
  86:	f4 cf       	rjmp	.-24     	; 0x70 <__SREG__+0x31>

00000088 <_exit>:
  88:	f8 94       	cli

0000008a <__stop_program>:
  8a:	ff cf       	rjmp	.-2      	; 0x8a <__stop_program>
