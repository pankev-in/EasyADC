
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000074  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000074  000000e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001a7  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000014c  00000000  00000000  000002f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000186  00000000  00000000  00000443  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  000005cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001a1  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000a0  00000000  00000000  000007cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  0000086d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	10 d0       	rcall	.+32     	; 0x54 <main>
  34:	1d c0       	rjmp	.+58     	; 0x70 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <uart_init>:
#define BAUD_REAL (F_CPU/(16*(UBRR_VAL+1)))     // Reale Baudrate
#define BAUD_ERROR ((BAUD_REAL*1000)/BAUD) // Fehler in Promille, 1000 = kein Fehler.


void uart_init(void){
	UBRRH = UBRR_VAL >> 8;
  38:	81 e0       	ldi	r24, 0x01	; 1
  3a:	80 bd       	out	0x20, r24	; 32
	UBRRL = UBRR_VAL & 0xFF;
  3c:	82 e6       	ldi	r24, 0x62	; 98
  3e:	89 b9       	out	0x09, r24	; 9
	UCSRB |= (1<<TXEN);								// UART TX einschalten
  40:	53 9a       	sbi	0x0a, 3	; 10
	UCSRC = (1<<URSEL)|(1 << UCSZ1)|(1 << UCSZ0);	// Asynchron 8N1
  42:	86 e8       	ldi	r24, 0x86	; 134
  44:	80 bd       	out	0x20, r24	; 32
  46:	08 95       	ret

00000048 <uart_putc>:
}


int uart_putc(unsigned char c)
{
	while (!(UCSRA & (1<<UDRE)))  /* warten bis Senden moeglich */
  48:	5d 9b       	sbis	0x0b, 5	; 11
  4a:	fe cf       	rjmp	.-4      	; 0x48 <uart_putc>
	{
	}
	UDR = c;                      /* sende Zeichen */
  4c:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
  4e:	80 e0       	ldi	r24, 0x00	; 0
  50:	90 e0       	ldi	r25, 0x00	; 0
  52:	08 95       	ret

00000054 <main>:
	}
}

int main(void)
{
	uart_init();
  54:	f1 df       	rcall	.-30     	; 0x38 <uart_init>
	set_bit(LED_DDR,LED_Green);
  56:	a2 9a       	sbi	0x14, 2	; 20
	set_bit(LED_DDR,LED_Red);
  58:	a3 9a       	sbi	0x14, 3	; 20
    while(1)
    {
		//_delay_ms(20);
		//set_bit(LED_PORT, LED_Green);
		//clear_bit(LED_PORT,LED_Red);
		uart_putc(0b11001100);
  5a:	8c ec       	ldi	r24, 0xCC	; 204
  5c:	f5 df       	rcall	.-22     	; 0x48 <uart_putc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5e:	8f e4       	ldi	r24, 0x4F	; 79
  60:	93 ec       	ldi	r25, 0xC3	; 195
  62:	01 97       	sbiw	r24, 0x01	; 1
  64:	f1 f7       	brne	.-4      	; 0x62 <main+0xe>
  66:	00 c0       	rjmp	.+0      	; 0x68 <main+0x14>
  68:	00 00       	nop
		
		_delay_ms(200);
		clear_bit(LED_PORT,LED_Green);
  6a:	aa 98       	cbi	0x15, 2	; 21
		set_bit(LED_PORT, LED_Red);
  6c:	ab 9a       	sbi	0x15, 3	; 21
  6e:	f5 cf       	rjmp	.-22     	; 0x5a <main+0x6>

00000070 <_exit>:
  70:	f8 94       	cli

00000072 <__stop_program>:
  72:	ff cf       	rjmp	.-2      	; 0x72 <__stop_program>
