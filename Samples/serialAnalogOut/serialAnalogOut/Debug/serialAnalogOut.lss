
serialAnalogOut.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000134  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000134  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000050  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000275  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000180  00000000  00000000  0000049d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000144  00000000  00000000  0000061d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00000764  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b8  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000134  00000000  00000000  000009bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	2a d0       	rcall	.+84     	; 0x88 <main>
  34:	7d c0       	rjmp	.+250    	; 0x130 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <USARTInit>:

void USARTInit(uint16_t ubrr_value)
{

   //Set Baud rate
  UBRRL = ubrr_value;
  38:	89 b9       	out	0x09, r24	; 9
  UBRRH = (ubrr_value>>8);
  3a:	90 bd       	out	0x20, r25	; 32
   >> char size 8

   */

   //Enable The receiver and transmitter
   UCSRB=(1<<RXEN)|(1<<TXEN);
  3c:	88 e1       	ldi	r24, 0x18	; 24
  3e:	8a b9       	out	0x0a, r24	; 10
   UCSRC = (1<<URSEL)|(1 << UCSZ1)|(1 << UCSZ0);
  40:	86 e8       	ldi	r24, 0x86	; 134
  42:	80 bd       	out	0x20, r24	; 32
  44:	08 95       	ret

00000046 <USARTWriteChar>:

void USARTWriteChar(char data)
{
	//Wait until the transmitter is ready

	while(!(UCSRA & (1<<UDRE)))
  46:	5d 9b       	sbis	0x0b, 5	; 11
  48:	fe cf       	rjmp	.-4      	; 0x46 <USARTWriteChar>
		//Do nothing
	}

	//Now write the data to USART buffer

	UDR=data;
  4a:	8c b9       	out	0x0c, r24	; 12
  4c:	08 95       	ret

0000004e <USARTWriteString>:
}

void USARTWriteString(char data[]){
  4e:	cf 93       	push	r28
  50:	df 93       	push	r29
  52:	ec 01       	movw	r28, r24
	int i =0;
	while (data[i] != 0x00)
  54:	88 81       	ld	r24, Y
  56:	88 23       	and	r24, r24
  58:	29 f0       	breq	.+10     	; 0x64 <USARTWriteString+0x16>
  5a:	21 96       	adiw	r28, 0x01	; 1
	{
		USARTWriteChar(data[i]);
  5c:	f4 df       	rcall	.-24     	; 0x46 <USARTWriteChar>
	UDR=data;
}

void USARTWriteString(char data[]){
	int i =0;
	while (data[i] != 0x00)
  5e:	89 91       	ld	r24, Y+
  60:	81 11       	cpse	r24, r1
  62:	fc cf       	rjmp	.-8      	; 0x5c <USARTWriteString+0xe>
		USARTWriteChar(data[i]);
		i++;
	}
	
	//Starting new line for next output:
	USARTWriteChar('\r');
  64:	8d e0       	ldi	r24, 0x0D	; 13
  66:	ef df       	rcall	.-34     	; 0x46 <USARTWriteChar>
	USARTWriteChar('\n');
  68:	8a e0       	ldi	r24, 0x0A	; 10
  6a:	ed df       	rcall	.-38     	; 0x46 <USARTWriteChar>
}
  6c:	df 91       	pop	r29
  6e:	cf 91       	pop	r28
  70:	08 95       	ret

00000072 <ADCinit>:

void ADCinit(){
	
	//selecting ADC5 as my channel:
	ADMUX |= (1<<MUX0);
  72:	38 9a       	sbi	0x07, 0	; 7
	ADMUX |= (1<<MUX2);
  74:	3a 9a       	sbi	0x07, 2	; 7
	
	//Enable with ADEN and set prescaler to 128:
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  76:	87 e8       	ldi	r24, 0x87	; 135
  78:	86 b9       	out	0x06, r24	; 6
  7a:	08 95       	ret

0000007c <ADCread>:
}

int ADCread(){
	ADCSRA |= (1<<ADSC);
  7c:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADSC));
  7e:	36 99       	sbic	0x06, 6	; 6
  80:	fe cf       	rjmp	.-4      	; 0x7e <ADCread+0x2>
	return (ADC);
  82:	84 b1       	in	r24, 0x04	; 4
  84:	95 b1       	in	r25, 0x05	; 5
}
  86:	08 95       	ret

00000088 <main>:

int main(void)
{
  88:	cf 93       	push	r28
  8a:	df 93       	push	r29
  8c:	00 d0       	rcall	.+0      	; 0x8e <main+0x6>
  8e:	00 d0       	rcall	.+0      	; 0x90 <main+0x8>
  90:	cd b7       	in	r28, 0x3d	; 61
  92:	de b7       	in	r29, 0x3e	; 62
	USARTInit(52);
  94:	84 e3       	ldi	r24, 0x34	; 52
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	cf df       	rcall	.-98     	; 0x38 <USARTInit>
	
	char output[4];	
	int adc_value; // Variable to hold ADC result
	ADCinit();
  9a:	eb df       	rcall	.-42     	; 0x72 <ADCinit>
	
    while(1)
   {
	   
		adc_value = ADCread(0);
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	ed df       	rcall	.-38     	; 0x7c <ADCread>
		itoa(adc_value,output,10);
  a2:	4a e0       	ldi	r20, 0x0A	; 10
  a4:	50 e0       	ldi	r21, 0x00	; 0
  a6:	be 01       	movw	r22, r28
  a8:	6f 5f       	subi	r22, 0xFF	; 255
  aa:	7f 4f       	sbci	r23, 0xFF	; 255
  ac:	04 d0       	rcall	.+8      	; 0xb6 <itoa>

		//Now write the data to USART buffer
		USARTWriteString(output);
  ae:	ce 01       	movw	r24, r28
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	cd df       	rcall	.-102    	; 0x4e <USARTWriteString>
  b4:	f3 cf       	rjmp	.-26     	; 0x9c <main+0x14>

000000b6 <itoa>:
  b6:	45 32       	cpi	r20, 0x25	; 37
  b8:	51 05       	cpc	r21, r1
  ba:	18 f4       	brcc	.+6      	; 0xc2 <itoa+0xc>
  bc:	42 30       	cpi	r20, 0x02	; 2
  be:	08 f0       	brcs	.+2      	; 0xc2 <itoa+0xc>
  c0:	04 c0       	rjmp	.+8      	; 0xca <__itoa_ncheck>
  c2:	fb 01       	movw	r30, r22
  c4:	10 82       	st	Z, r1
  c6:	cb 01       	movw	r24, r22
  c8:	08 95       	ret

000000ca <__itoa_ncheck>:
  ca:	bb 27       	eor	r27, r27
  cc:	4a 30       	cpi	r20, 0x0A	; 10
  ce:	31 f4       	brne	.+12     	; 0xdc <__itoa_ncheck+0x12>
  d0:	99 23       	and	r25, r25
  d2:	22 f4       	brpl	.+8      	; 0xdc <__itoa_ncheck+0x12>
  d4:	bd e2       	ldi	r27, 0x2D	; 45
  d6:	90 95       	com	r25
  d8:	81 95       	neg	r24
  da:	9f 4f       	sbci	r25, 0xFF	; 255
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <__utoa_common>

000000de <__utoa_ncheck>:
  de:	bb 27       	eor	r27, r27

000000e0 <__utoa_common>:
  e0:	fb 01       	movw	r30, r22
  e2:	55 27       	eor	r21, r21
  e4:	aa 27       	eor	r26, r26
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	aa 1f       	adc	r26, r26
  ec:	a4 17       	cp	r26, r20
  ee:	10 f0       	brcs	.+4      	; 0xf4 <__utoa_common+0x14>
  f0:	a4 1b       	sub	r26, r20
  f2:	83 95       	inc	r24
  f4:	50 51       	subi	r21, 0x10	; 16
  f6:	b9 f7       	brne	.-18     	; 0xe6 <__utoa_common+0x6>
  f8:	a0 5d       	subi	r26, 0xD0	; 208
  fa:	aa 33       	cpi	r26, 0x3A	; 58
  fc:	08 f0       	brcs	.+2      	; 0x100 <__utoa_common+0x20>
  fe:	a9 5d       	subi	r26, 0xD9	; 217
 100:	a1 93       	st	Z+, r26
 102:	00 97       	sbiw	r24, 0x00	; 0
 104:	79 f7       	brne	.-34     	; 0xe4 <__utoa_common+0x4>
 106:	b1 11       	cpse	r27, r1
 108:	b1 93       	st	Z+, r27
 10a:	11 92       	st	Z+, r1
 10c:	cb 01       	movw	r24, r22
 10e:	00 c0       	rjmp	.+0      	; 0x110 <strrev>

00000110 <strrev>:
 110:	dc 01       	movw	r26, r24
 112:	fc 01       	movw	r30, r24
 114:	67 2f       	mov	r22, r23
 116:	71 91       	ld	r23, Z+
 118:	77 23       	and	r23, r23
 11a:	e1 f7       	brne	.-8      	; 0x114 <strrev+0x4>
 11c:	32 97       	sbiw	r30, 0x02	; 2
 11e:	04 c0       	rjmp	.+8      	; 0x128 <strrev+0x18>
 120:	7c 91       	ld	r23, X
 122:	6d 93       	st	X+, r22
 124:	70 83       	st	Z, r23
 126:	62 91       	ld	r22, -Z
 128:	ae 17       	cp	r26, r30
 12a:	bf 07       	cpc	r27, r31
 12c:	c8 f3       	brcs	.-14     	; 0x120 <strrev+0x10>
 12e:	08 95       	ret

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
