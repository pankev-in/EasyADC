
blink-led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000098  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000098  0000010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001c2  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000e5  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000153  00000000  00000000  00000403  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000558  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000017a  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000090  00000000  00000000  000006f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000786  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	2f c0       	rjmp	.+94     	; 0x94 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <util/delay.h> //includes delay header file

int main(void)
{
	
	DDRD=0b11000000;
  38:	80 ec       	ldi	r24, 0xC0	; 192
  3a:	81 bb       	out	0x11, r24	; 17
	PORTD=0b00100000;
  3c:	80 e2       	ldi	r24, 0x20	; 32
  3e:	82 bb       	out	0x12, r24	; 18
	while(1)
	{
		if(bit_is_clear(PIND, 5)){
  40:	85 99       	sbic	0x10, 5	; 16
  42:	11 c0       	rjmp	.+34     	; 0x66 <__SREG__+0x27>
			PORTD |= (1<<6);
  44:	96 9a       	sbi	0x12, 6	; 18
			PORTD &= ~(1<<7);
  46:	97 98       	cbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  48:	87 ea       	ldi	r24, 0xA7	; 167
  4a:	91 e6       	ldi	r25, 0x61	; 97
  4c:	01 97       	sbiw	r24, 0x01	; 1
  4e:	f1 f7       	brne	.-4      	; 0x4c <__SREG__+0xd>
  50:	00 c0       	rjmp	.+0      	; 0x52 <__SREG__+0x13>
  52:	00 00       	nop
			_delay_ms(100);
			PORTD |= (1<<7);
  54:	97 9a       	sbi	0x12, 7	; 18
			PORTD &= ~(1<<6);
  56:	96 98       	cbi	0x12, 6	; 18
  58:	87 ea       	ldi	r24, 0xA7	; 167
  5a:	91 e6       	ldi	r25, 0x61	; 97
  5c:	01 97       	sbiw	r24, 0x01	; 1
  5e:	f1 f7       	brne	.-4      	; 0x5c <__SREG__+0x1d>
  60:	00 c0       	rjmp	.+0      	; 0x62 <__SREG__+0x23>
  62:	00 00       	nop
  64:	ed cf       	rjmp	.-38     	; 0x40 <__SREG__+0x1>
			_delay_ms(100);
		}
		else{
			PORTD |= (1<<6);
  66:	96 9a       	sbi	0x12, 6	; 18
			PORTD &= ~(1<<7);
  68:	97 98       	cbi	0x12, 7	; 18
  6a:	9f e9       	ldi	r25, 0x9F	; 159
  6c:	26 e8       	ldi	r18, 0x86	; 134
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	91 50       	subi	r25, 0x01	; 1
  72:	20 40       	sbci	r18, 0x00	; 0
  74:	80 40       	sbci	r24, 0x00	; 0
  76:	e1 f7       	brne	.-8      	; 0x70 <__SREG__+0x31>
  78:	00 c0       	rjmp	.+0      	; 0x7a <__SREG__+0x3b>
  7a:	00 00       	nop
			_delay_ms(500);
			PORTD |= (1<<7);
  7c:	97 9a       	sbi	0x12, 7	; 18
			PORTD &= ~(1<<6);
  7e:	96 98       	cbi	0x12, 6	; 18
  80:	9f e9       	ldi	r25, 0x9F	; 159
  82:	26 e8       	ldi	r18, 0x86	; 134
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	91 50       	subi	r25, 0x01	; 1
  88:	20 40       	sbci	r18, 0x00	; 0
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <__SREG__+0x47>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <__SREG__+0x51>
  90:	00 00       	nop
  92:	d6 cf       	rjmp	.-84     	; 0x40 <__SREG__+0x1>

00000094 <_exit>:
  94:	f8 94       	cli

00000096 <__stop_program>:
  96:	ff cf       	rjmp	.-2      	; 0x96 <__stop_program>
