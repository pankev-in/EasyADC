
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000007a  000000ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000181  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000e1  00000000  00000000  000002d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000102  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000054  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000157  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000044  00000000  00000000  00000667  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  000006ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	11 d0       	rcall	.+34     	; 0x56 <main>
  34:	20 c0       	rjmp	.+64     	; 0x76 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <USARTInit>:

void USARTInit(uint16_t ubrr_value)
{

   //Set Baud rate
  UBRRL = ubrr_value;
  38:	89 b9       	out	0x09, r24	; 9
  UBRRH = (ubrr_value>>8);
  3a:	90 bd       	out	0x20, r25	; 32
   >> char size 8

   */

   //Enable The receiver and transmitter
   UCSRB=(1<<RXEN)|(1<<TXEN);
  3c:	88 e1       	ldi	r24, 0x18	; 24
  3e:	8a b9       	out	0x0a, r24	; 10
   UCSRC = (1<<URSEL)|(1 << UCSZ1)|(1 << UCSZ0);
  40:	86 e8       	ldi	r24, 0x86	; 134
  42:	80 bd       	out	0x20, r24	; 32
  44:	08 95       	ret

00000046 <USARTReadChar>:

char USARTReadChar()
{
	//Wait untill a data is available

	while(!(UCSRA & (1<<RXC)))
  46:	5f 9b       	sbis	0x0b, 7	; 11
  48:	fe cf       	rjmp	.-4      	; 0x46 <USARTReadChar>
	}

	//Now USART has got data from host
	//and is available is buffer

	return UDR;
  4a:	8c b1       	in	r24, 0x0c	; 12
}
  4c:	08 95       	ret

0000004e <USARTWriteChar>:

void USARTWriteChar(char data)
{
	//Wait until the transmitter is ready

	while(!(UCSRA & (1<<UDRE)))
  4e:	5d 9b       	sbis	0x0b, 5	; 11
  50:	fe cf       	rjmp	.-4      	; 0x4e <USARTWriteChar>
		//Do nothing
	}

	//Now write the data to USART buffer

	UDR=data;
  52:	8c b9       	out	0x0c, r24	; 12
  54:	08 95       	ret

00000056 <main>:

int main(void)
{
	
	char data;
	USARTInit(52);
  56:	84 e3       	ldi	r24, 0x34	; 52
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	ee df       	rcall	.-36     	; 0x38 <USARTInit>
	DDRD = 0XFF;
  5c:	8f ef       	ldi	r24, 0xFF	; 255
  5e:	81 bb       	out	0x11, r24	; 17
	
    while(1)
   {
		//Read data
		data=USARTReadChar();
  60:	f2 df       	rcall	.-28     	; 0x46 <USARTReadChar>
  62:	c8 2f       	mov	r28, r24


		//Now write the data to USART buffer
		USARTWriteChar('[');
  64:	8b e5       	ldi	r24, 0x5B	; 91
  66:	f3 df       	rcall	.-26     	; 0x4e <USARTWriteChar>
		USARTWriteChar(data);
  68:	8c 2f       	mov	r24, r28
  6a:	f1 df       	rcall	.-30     	; 0x4e <USARTWriteChar>
		USARTWriteChar(']');
  6c:	8d e5       	ldi	r24, 0x5D	; 93
  6e:	ef df       	rcall	.-34     	; 0x4e <USARTWriteChar>
		USARTWriteChar('\n');
  70:	8a e0       	ldi	r24, 0x0A	; 10
  72:	ed df       	rcall	.-38     	; 0x4e <USARTWriteChar>
  74:	f5 cf       	rjmp	.-22     	; 0x60 <main+0xa>

00000076 <_exit>:
  76:	f8 94       	cli

00000078 <__stop_program>:
  78:	ff cf       	rjmp	.-2      	; 0x78 <__stop_program>
