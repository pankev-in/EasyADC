
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000001dc  00000270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000045  00800078  00800078  00000288  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004cc  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000254  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a7  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00000cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000028d  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000304  00000000  00000000  00001081  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00001385  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1e c0       	rjmp	.+60     	; 0x3e <__ctors_end>
   2:	38 c0       	rjmp	.+112    	; 0x74 <__bad_interrupt>
   4:	37 c0       	rjmp	.+110    	; 0x74 <__bad_interrupt>
   6:	36 c0       	rjmp	.+108    	; 0x74 <__bad_interrupt>
   8:	35 c0       	rjmp	.+106    	; 0x74 <__bad_interrupt>
   a:	34 c0       	rjmp	.+104    	; 0x74 <__bad_interrupt>
   c:	33 c0       	rjmp	.+102    	; 0x74 <__bad_interrupt>
   e:	32 c0       	rjmp	.+100    	; 0x74 <__bad_interrupt>
  10:	31 c0       	rjmp	.+98     	; 0x74 <__bad_interrupt>
  12:	30 c0       	rjmp	.+96     	; 0x74 <__bad_interrupt>
  14:	2f c0       	rjmp	.+94     	; 0x74 <__bad_interrupt>
  16:	4b c0       	rjmp	.+150    	; 0xae <__vector_11>
  18:	76 c0       	rjmp	.+236    	; 0x106 <__vector_12>
  1a:	2c c0       	rjmp	.+88     	; 0x74 <__bad_interrupt>
  1c:	2b c0       	rjmp	.+86     	; 0x74 <__bad_interrupt>
  1e:	2a c0       	rjmp	.+84     	; 0x74 <__bad_interrupt>
  20:	29 c0       	rjmp	.+82     	; 0x74 <__bad_interrupt>
  22:	28 c0       	rjmp	.+80     	; 0x74 <__bad_interrupt>
  24:	27 c0       	rjmp	.+78     	; 0x74 <__bad_interrupt>

00000026 <__trampolines_end>:
  26:	53 74       	andi	r21, 0x43	; 67
  28:	72 69       	ori	r23, 0x92	; 146
  2a:	6e 67       	ori	r22, 0x7E	; 126
  2c:	20 73       	andi	r18, 0x30	; 48
  2e:	74 6f       	ori	r23, 0xF4	; 244
  30:	72 65       	ori	r23, 0x52	; 82
  32:	64 20       	and	r6, r4
  34:	69 6e       	ori	r22, 0xE9	; 233
  36:	20 46       	sbci	r18, 0x60	; 96
  38:	4c 41       	sbci	r20, 0x1C	; 28
  3a:	53 48       	sbci	r21, 0x83	; 131
  3c:	0a 00       	.word	0x000a	; ????

0000003e <__ctors_end>:
  3e:	11 24       	eor	r1, r1
  40:	1f be       	out	0x3f, r1	; 63
  42:	cf e5       	ldi	r28, 0x5F	; 95
  44:	d4 e0       	ldi	r29, 0x04	; 4
  46:	de bf       	out	0x3e, r29	; 62
  48:	cd bf       	out	0x3d, r28	; 61

0000004a <__do_copy_data>:
  4a:	10 e0       	ldi	r17, 0x00	; 0
  4c:	a0 e6       	ldi	r26, 0x60	; 96
  4e:	b0 e0       	ldi	r27, 0x00	; 0
  50:	ec ed       	ldi	r30, 0xDC	; 220
  52:	f1 e0       	ldi	r31, 0x01	; 1
  54:	02 c0       	rjmp	.+4      	; 0x5a <__do_copy_data+0x10>
  56:	05 90       	lpm	r0, Z+
  58:	0d 92       	st	X+, r0
  5a:	a8 37       	cpi	r26, 0x78	; 120
  5c:	b1 07       	cpc	r27, r17
  5e:	d9 f7       	brne	.-10     	; 0x56 <__do_copy_data+0xc>

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a8 e7       	ldi	r26, 0x78	; 120
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ad 3b       	cpi	r26, 0xBD	; 189
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	02 d0       	rcall	.+4      	; 0x76 <main>
  72:	b2 c0       	rjmp	.+356    	; 0x1d8 <_exit>

00000074 <__bad_interrupt>:
  74:	c5 cf       	rjmp	.-118    	; 0x0 <__vectors>

00000076 <main>:


int main(void)
{
 
    uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
  76:	8d e4       	ldi	r24, 0x4D	; 77
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	6a d0       	rcall	.+212    	; 0x150 <uart_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	2f e7       	ldi	r18, 0x7F	; 127
  7e:	8a e1       	ldi	r24, 0x1A	; 26
  80:	96 e0       	ldi	r25, 0x06	; 6
  82:	21 50       	subi	r18, 0x01	; 1
  84:	80 40       	sbci	r24, 0x00	; 0
  86:	90 40       	sbci	r25, 0x00	; 0
  88:	e1 f7       	brne	.-8      	; 0x82 <main+0xc>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <main+0x16>
  8c:	00 00       	nop
	
	_delay_ms(2000);
 
 
	while(1){
		uart_puts("String stored in SRAM\n");
  8e:	80 e6       	ldi	r24, 0x60	; 96
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	83 d0       	rcall	.+262    	; 0x19a <uart_puts>
    

		uart_puts_P("String stored in FLASH\n");
  94:	86 e2       	ldi	r24, 0x26	; 38
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	8e d0       	rcall	.+284    	; 0x1b6 <uart_puts_p>
  9a:	2f e3       	ldi	r18, 0x3F	; 63
  9c:	8d e0       	ldi	r24, 0x0D	; 13
  9e:	93 e0       	ldi	r25, 0x03	; 3
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x2a>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x34>
  aa:	00 00       	nop
  ac:	f0 cf       	rjmp	.-32     	; 0x8e <main+0x18>

000000ae <__vector_11>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
  be:	ef 93       	push	r30
  c0:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
  c2:	8b b1       	in	r24, 0x0b	; 11
    data = UART0_DATA;
  c4:	2c b1       	in	r18, 0x0c	; 12
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
  c6:	88 71       	andi	r24, 0x18	; 24
#elif defined( AT90USB_USART )
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
  c8:	e0 91 7a 00 	lds	r30, 0x007A
  cc:	ef 5f       	subi	r30, 0xFF	; 255
  ce:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
  d0:	90 91 79 00 	lds	r25, 0x0079
  d4:	e9 17       	cp	r30, r25
  d6:	39 f0       	breq	.+14     	; 0xe6 <__vector_11+0x38>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
  d8:	e0 93 7a 00 	sts	0x007A, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	e3 58       	subi	r30, 0x83	; 131
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	20 83       	st	Z, r18
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <__vector_11+0x3a>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
  e6:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
  e8:	90 91 78 00 	lds	r25, 0x0078
  ec:	89 2b       	or	r24, r25
  ee:	80 93 78 00 	sts	0x0078, r24
}
  f2:	ff 91       	pop	r31
  f4:	ef 91       	pop	r30
  f6:	9f 91       	pop	r25
  f8:	8f 91       	pop	r24
  fa:	2f 91       	pop	r18
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <__vector_12>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	ef 93       	push	r30
 116:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 118:	90 91 7c 00 	lds	r25, 0x007C
 11c:	80 91 7b 00 	lds	r24, 0x007B
 120:	98 17       	cp	r25, r24
 122:	61 f0       	breq	.+24     	; 0x13c <__vector_12+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 124:	e0 91 7b 00 	lds	r30, 0x007B
 128:	ef 5f       	subi	r30, 0xFF	; 255
 12a:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 12c:	e0 93 7b 00 	sts	0x007B, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	e3 56       	subi	r30, 0x63	; 99
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	80 81       	ld	r24, Z
 138:	8c b9       	out	0x0c, r24	; 12
 13a:	01 c0       	rjmp	.+2      	; 0x13e <__vector_12+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 13c:	55 98       	cbi	0x0a, 5	; 10
    }
}
 13e:	ff 91       	pop	r31
 140:	ef 91       	pop	r30
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 150:	10 92 7c 00 	sts	0x007C, r1
    UART_TxTail = 0;
 154:	10 92 7b 00 	sts	0x007B, r1
    UART_RxHead = 0;
 158:	10 92 7a 00 	sts	0x007A, r1
    UART_RxTail = 0;
 15c:	10 92 79 00 	sts	0x0079, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
 160:	99 23       	and	r25, r25
 162:	1c f4       	brge	.+6      	; 0x16a <uart_init+0x1a>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
 164:	22 e0       	ldi	r18, 0x02	; 2
 166:	2b b9       	out	0x0b, r18	; 11
    	 baudrate &= ~0x8000;
 168:	9f 77       	andi	r25, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
 16a:	90 bd       	out	0x20, r25	; 32
    UBRRL = (unsigned char) baudrate;
 16c:	89 b9       	out	0x09, r24	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 16e:	88 e9       	ldi	r24, 0x98	; 152
 170:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 172:	86 e8       	ldi	r24, 0x86	; 134
 174:	80 bd       	out	0x20, r24	; 32
 176:	08 95       	ret

00000178 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 178:	20 91 7c 00 	lds	r18, 0x007C
 17c:	2f 5f       	subi	r18, 0xFF	; 255
 17e:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 180:	90 91 7b 00 	lds	r25, 0x007B
 184:	29 17       	cp	r18, r25
 186:	e1 f3       	breq	.-8      	; 0x180 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 188:	e2 2f       	mov	r30, r18
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	e3 56       	subi	r30, 0x63	; 99
 18e:	ff 4f       	sbci	r31, 0xFF	; 255
 190:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 192:	20 93 7c 00 	sts	0x007C, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 196:	55 9a       	sbi	0x0a, 5	; 10
 198:	08 95       	ret

0000019a <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	ec 01       	movw	r28, r24
    while (*s) 
 1a0:	88 81       	ld	r24, Y
 1a2:	88 23       	and	r24, r24
 1a4:	29 f0       	breq	.+10     	; 0x1b0 <uart_puts+0x16>
 1a6:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
 1a8:	e7 df       	rcall	.-50     	; 0x178 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 1aa:	89 91       	ld	r24, Y+
 1ac:	81 11       	cpse	r24, r1
 1ae:	fc cf       	rjmp	.-8      	; 0x1a8 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 1ba:	ec 01       	movw	r28, r24
 1bc:	21 96       	adiw	r28, 0x01	; 1
 1be:	fc 01       	movw	r30, r24
 1c0:	84 91       	lpm	r24, Z
 1c2:	88 23       	and	r24, r24
 1c4:	31 f0       	breq	.+12     	; 0x1d2 <uart_puts_p+0x1c>
      uart_putc(c);
 1c6:	d8 df       	rcall	.-80     	; 0x178 <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 1c8:	fe 01       	movw	r30, r28
 1ca:	84 91       	lpm	r24, Z
 1cc:	21 96       	adiw	r28, 0x01	; 1
 1ce:	81 11       	cpse	r24, r1
 1d0:	fa cf       	rjmp	.-12     	; 0x1c6 <uart_puts_p+0x10>
      uart_putc(c);

}/* uart_puts_p */
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
